@model ProductModel
@inject MerchantAreaSettings MerchantAreaSettings

@{
    var defaultGridPageSize = MerchantAreaSettings.DefaultGridPageSize;
    var gridPageSizes = MerchantAreaSettings.GridPageSizes;
}

<div class="panel-group">
    <p>
        @T("Merchant.Catalog.Products.PurchasedWithOrders.Hint")
    </p>
    @await Component.InvokeAsync("MerchantWidget", new { widgetZone = MerchantWidgetZones.ProductDetailsPurchasedWithOrdersTop, additionalData = Model })
    <div class="panel panel-default">
        <div class="panel-body">
            <div id="purchased-with-orders-grid"></div>

            <script>
                $(document).ready(function() {
                    $("#purchased-with-orders-grid").kendoGrid({
                        dataSource: {
                            type: "json",
                            transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("PurchasedWithOrders", "Product", new {productId = Model.Id}))",
                                    type: "POST",
                                    dataType: "json",
                                    data: addAntiForgeryToken
                                }
                            },
                            schema: {
                                data: "Data",
                                total: "Total",
                                errors: "Errors"
                            },
                            error: function(e) {
                                display_kendoui_grid_error(e);
                                // Cancel the changes
                                this.cancelChanges();
                            },
                            pageSize: @(defaultGridPageSize),
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: true
                        },
                        pageable: {
                            refresh: true,
                            pageSizes: [@(gridPageSizes)],
                            @await Html.PartialAsync("_GridPagerMessages")
                        },
                        editable: {
                            confirmation: "@T("Merchant.Common.DeleteConfirmation")",
                            mode: "inline"
                        },
                        scrollable: false,
                        columns: [
                            {
                                field: "CustomOrderNumber",
                                title: "@T("Merchant.Orders.Fields.CustomOrderNumber")",
                                width: 200
                            }, {
                                field: "CustomerEmail",
                                title: "@T("Merchant.Orders.Fields.CustomerEmail")",
                                width: 200
                            },
                            @if (!Model.IsLoggedInAsVendor)
                            {
                                <text>{
                                field: "OrderStatus",
                                title: "@T("Merchant.Orders.Fields.OrderStatus")",
                                width: 100
                            },{
                                field: "PaymentStatus",
                                title: "@T("Merchant.Orders.Fields.PaymentStatus")",
                                width: 100
                            },{
                                field: "ShippingStatus",
                                title: "@T("Merchant.Orders.Fields.ShippingStatus")",
                                width: 100
                            },</text>
                            }

                            {
                                field: "CreatedOn",
                                title: "@T("Merchant.Orders.Fields.CreatedOn")",
                                width: 200,
                                type: "date",
                                format: "{0:G}"
                            },
                            {
                                field: "Id",
                                title: "@T("Merchant.Common.View")",
                                width: 200,
                                headerAttributes: { style: "text-align:center" },
                                attributes: { style: "text-align:center" },
                                template: '<a class="btn btn-default" href="@Url.Content("~/Merchant/Order/Edit/")#=Id#"><i class="fa fa-eye"></i>@T("Merchant.Common.View")</a>'
                            }
                        ]
                    });
                });
            </script>
        </div>
    </div>
    @await Component.InvokeAsync("MerchantWidget", new { widgetZone = MerchantWidgetZones.ProductDetailsPurchasedWithOrdersBottom, additionalData = Model })
</div>