@using Microsoft.AspNetCore.Mvc.Controllers
@using Nop.Core
@using Nop.Core.Plugins
@using Nop.Services.Authentication.External
@using Nop.Services.Cms
@using Nop.Services.Common
@using Nop.Services.Payments
@using Nop.Services.Plugins
@using Nop.Services.Shipping
@using Nop.Services.Shipping.Pickup
@using Nop.Services.Tax
@inject IPluginFinder pluginFinder
@inject IWebHelper webHelper
@{
    var plugin = PluginManager.FindPlugin((this.ViewContext.ActionDescriptor as ControllerActionDescriptor).ControllerTypeInfo).Instance();

    //friendly name
    var friendlyName = plugin?.PluginDescriptor.FriendlyName;

    var activeMenuSystemName = string.Empty;
    var configureLocale = string.Empty;
    var backToLocale = string.Empty;
    var listActionMethodName = string.Empty;
    var listControllerName = string.Empty;

    if (plugin is IPaymentMethod)
    {
        //payment plugin
        activeMenuSystemName = "Payment methods";
        configureLocale = "Merchant.Configuration.Payment.Methods.Configure";
        backToLocale = "Merchant.Configuration.Payment.Methods.BackToList";
        listActionMethodName = "Methods";
        listControllerName = "Payment";
    }
    else if (plugin is IShippingRateComputationMethod)
    {
        //shipping rate computation method
        activeMenuSystemName = "Shipping providers";
        configureLocale = "Merchant.Configuration.Shipping.Providers.Configure";
        backToLocale = "Merchant.Configuration.Shipping.Providers.BackToList";
        listActionMethodName = "Providers";
        listControllerName = "Shipping";
    }
    else if (plugin is IPickupPointProvider)
    {
        //pickup point provider
        activeMenuSystemName = "Pickup points";
        configureLocale = "Merchant.Configuration.Shipping.PickupPointProviders.Configure";
        backToLocale = "Merchant.Configuration.Shipping.PickupPointProviders.BackToList";
        listActionMethodName = "PickupPointProviders";
        listControllerName = "Shipping";
    }
    else if (plugin is ITaxProvider)
    {
        //tax provider
        activeMenuSystemName = "Tax providers";
        configureLocale = "Merchant.Configuration.Tax.Providers.Configure";
        backToLocale = "Merchant.Configuration.Tax.Providers.BackToList";
        listActionMethodName = "Providers";
        listControllerName = "Tax";
    }
    else if (plugin is IExternalAuthenticationMethod)
    {
        //external auth method
        activeMenuSystemName = "External authentication methods";
        configureLocale = "Merchant.Configuration.ExternalAuthenticationMethods.Configure";
        backToLocale = "Merchant.Configuration.ExternalAuthenticationMethods.BackToList";
        listActionMethodName = "Methods";
        listControllerName = "ExternalAuthentication";
    }
    else if (plugin is IWidgetPlugin)
    {
        //widgets
        activeMenuSystemName = "Widgets";
        configureLocale = "Merchant.ContentManagement.Widgets.Configure";
        backToLocale = "Merchant.ContentManagement.Widgets.BackToList";
        listActionMethodName = "List";
        listControllerName = "Widget";
    }
    else if (plugin is IMiscPlugin)
    {
        //Misc plugins
        activeMenuSystemName = "Local plugins";
        configureLocale = "Merchant.Configuration.Plugins.Misc.Configure";
        backToLocale = "Merchant.Configuration.Plugins.Misc.BackToList";
        listActionMethodName = "List";
        listControllerName = "Plugin";
    }

    Layout = "_MerchantLayout";
    //page title
    ViewBag.Title = T(configureLocale).Text + " - " + friendlyName;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName(activeMenuSystemName);

}
<div class="content-header clearfix">
    <h1 class="pull-left">
        @T(configureLocale) - @friendlyName
        <small>
            <i class="fa fa-arrow-circle-left"></i>
            <a asp-action="@listActionMethodName" asp-controller="@listControllerName">@T(backToLocale)</a>
        </small>
    </h1>
    <div class="pull-right">
        &nbsp;
    </div>
</div>
<div class="content">
    <div class="form-horizontal">
        @*@if (plugin != null)
        {*@
            @RenderBody()
        @*}
        else
        {
            <div class="panel-group">
                <div class="panel panel-default">
                    <div class="panel-body">
                        @T("Merchant.Common.ConfigurationNotRequired")
                    </div>
                </div>
            </div>
        }*@
    </div>
</div>
